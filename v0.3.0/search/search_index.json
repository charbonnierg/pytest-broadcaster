{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pytest Broadcaster","text":"<p>A plugin to write pytest collect output to various destinations.</p> pip install pytest-broadcasterpytest --collect-report=report.json"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024, Guillaume Charbonnier</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage</li> <li>Reference</li> <li>Recipes</li> <li>License</li> </ul>"},{"location":"recipes/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Code Generation</li> </ul>"},{"location":"recipes/code_generation/","title":"Code Generation","text":"<p>JSON Schemas are provided for the data models.</p> <p>They can be used to generate code in various languages:</p> Python DataclassesPython Pydantic (v2)Python Pydantic (v1)Typescript <code>.d.ts</code> <p>It' possible to generate Python dataclasses from the JSON Schemas using <code>datamodel-code-generator</code>:</p> <ol> <li>First clone the repository:</li> </ol> <p>git clone https://github.com/charbonnierg/pytest-broadcastercd pytest-broadcaster</p> <ol> <li>Then install <code>datamodel-code-generator</code>:</li> </ol> <p>pip install --user datamodel-code-generator</p> <ol> <li>Then generate the code:</li> </ol> <p>datamodel-codegen \\     --input docs/schemas/ \\     --output models/ \\     --input-file-type jsonschema \\     --disable-timestamp \\     --output-model-type=dataclasses.dataclass \\     --use-field-description \\     --use-schema-description</p> <p>The generated code will be in the <code>models</code> directory.</p> <p>It' possible to generate Pydantic BaseModel classes from the JSON Schemas using <code>datamodel-code-generator</code>:</p> <ol> <li>First clone the repository:</li> </ol> <p>git clone https://github.com/charbonnierg/pytest-broadcastercd pytest-broadcaster</p> <ol> <li>Then install <code>datamodel-code-generator</code>:</li> </ol> <p>pip install --user datamodel-code-generator</p> <ol> <li>Then generate the code:</li> </ol> <p>datamodel-codegen \\     --input docs/schemas/ \\     --output models/ \\     --input-file-type jsonschema \\     --disable-timestamp \\     --output-model-type=pydantic_v2.BaseModel \\     --use-field-description \\     --use-schema-description</p> <p>The generated code will be in the <code>models</code> directory.</p> <p>It' possible to generate Pydantic BaseModel classes from the JSON Schemas using <code>datamodel-code-generator</code>:</p> <ol> <li>First clone the repository:</li> </ol> <p>git clone https://github.com/charbonnierg/pytest-broadcastercd pytest-broadcaster</p> <ol> <li>Then install <code>datamodel-code-generator</code>:</li> </ol> <p>pip install --user datamodel-code-generator</p> <ol> <li>Then generate the code:</li> </ol> <p>datamodel-codegen \\     --input docs/schemas/ \\     --output models/ \\     --input-file-type jsonschema \\     --disable-timestamp \\     --output-model-type=pydantic_v1.BaseModel \\     --use-field-description \\     --use-schema-description</p> <p>The generated code will be in the <code>models/</code> directory.</p> <p>It's possible to generate <code>.d.ts</code> files for Typescript using <code>json-schema-to-typescript</code>:</p> <ol> <li>First clone the repository:</li> </ol> <p>git clone https://github.com/charbonnierg/pytest-broadcastercd pytest-broadcaster</p> <ol> <li>Then install <code>json-schema-to-typescript</code>:</li> </ol> <p>npm install -g json-schema-to-typescript</p> <ol> <li>Then generate the code:</li> </ol> <p>json2ts -i docs/schemas/ -o types/</p> <p>The generated code will be in the <code>types/</code> directory.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Events</li> <li>Result</li> <li>Interfaces</li> <li>Hooks</li> </ul>"},{"location":"reference/events/","title":"Session Event","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/session_event.json</p> <p><code>SessionEvent</code> is a type alias for the union of all possible events that can be emitted during a test session.</p>"},{"location":"reference/events/#pytest_broadcaster.models.session_event.SessionEvent","title":"SessionEvent  <code>module-attribute</code>","text":"<pre><code>SessionEvent = Union[\n    CollectReport,\n    TestCaseFinished,\n    TestCaseSetup,\n    TestCaseTeardown,\n    TestCaseCall,\n    ErrorMessage,\n    WarningMessage,\n    SessionStart,\n    SessionFinish,\n]\n</code></pre>"},{"location":"reference/events/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Session Events</li> <li>Session Start</li> <li>Collect Report<ul> <li>Test Directory</li> <li>Test Module</li> <li>Test Suite</li> <li>Test Case</li> </ul> </li> <li>Test Case Steps<ul> <li>Test Case Setup</li> <li>Test Case Call</li> <li>Test Case Teardown</li> <li>Test Case Finished</li> </ul> </li> <li>Warning Message</li> <li>Error Message</li> <li>Session Finish</li> </ul>"},{"location":"reference/events/error_message/","title":"Error Message","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/error_message.json</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage","title":"ErrorMessage  <code>dataclass</code>","text":"<pre><code>ErrorMessage(\n    when: When,\n    location: Location,\n    exception_type: str,\n    exception_value: str,\n    traceback: Traceback,\n    event: str = \"error_message\",\n)\n</code></pre> <p>An error message.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: str = 'error_message'\n</code></pre> <p>The event type. Always 'error_message'.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.exception_type","title":"exception_type  <code>instance-attribute</code>","text":"<pre><code>exception_type: str\n</code></pre> <p>The exception type as a string.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.exception_value","title":"exception_value  <code>instance-attribute</code>","text":"<pre><code>exception_value: str\n</code></pre> <p>The exception value as a string.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.location","title":"location  <code>instance-attribute</code>","text":"<pre><code>location: Location\n</code></pre> <p>The location of the error.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.traceback","title":"traceback  <code>instance-attribute</code>","text":"<pre><code>traceback: Traceback\n</code></pre> <p>The traceback of the error. A traceback contains entries for each frame of the call stack.</p>"},{"location":"reference/events/error_message/#pytest_broadcaster.models.error_message.ErrorMessage.when","title":"when  <code>instance-attribute</code>","text":"<pre><code>when: When\n</code></pre> <p>When the error message is emitted.</p>"},{"location":"reference/events/session_finish/","title":"Session Finish","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/session_finish.json</p>"},{"location":"reference/events/session_finish/#pytest_broadcaster.models.session_finish.SessionFinish","title":"SessionFinish  <code>dataclass</code>","text":"<pre><code>SessionFinish(\n    exit_status: int, event: str = \"session_finish\"\n)\n</code></pre> <p>Event emitted when the session is finished.</p>"},{"location":"reference/events/session_finish/#pytest_broadcaster.models.session_finish.SessionFinish.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: str = 'session_finish'\n</code></pre> <p>The event type. Always set to 'session_finish'.</p>"},{"location":"reference/events/session_finish/#pytest_broadcaster.models.session_finish.SessionFinish.exit_status","title":"exit_status  <code>instance-attribute</code>","text":"<pre><code>exit_status: int\n</code></pre> <p>The status which pytest will return to the system. 0 means success, 1 means test failure, anything else is an error.</p>"},{"location":"reference/events/session_start/","title":"Session Start Event","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/session_start.json</p>"},{"location":"reference/events/session_start/#pytest_broadcaster.models.session_start.SessionStart","title":"SessionStart  <code>dataclass</code>","text":"<pre><code>SessionStart(\n    pytest_version: str,\n    plugin_version: str,\n    event: str = \"session_start\",\n)\n</code></pre> <p>Event emitted when the test session is started.</p>"},{"location":"reference/events/session_start/#pytest_broadcaster.models.session_start.SessionStart.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: str = 'session_start'\n</code></pre> <p>The event type. Always set to <code>session_start</code>.</p>"},{"location":"reference/events/session_start/#pytest_broadcaster.models.session_start.SessionStart.plugin_version","title":"plugin_version  <code>instance-attribute</code>","text":"<pre><code>plugin_version: str\n</code></pre> <p>The version of pytest-broadcaster plugin that is used to produce the report.</p>"},{"location":"reference/events/session_start/#pytest_broadcaster.models.session_start.SessionStart.pytest_version","title":"pytest_version  <code>instance-attribute</code>","text":"<pre><code>pytest_version: str\n</code></pre> <p>The version of pytest that is running the tests.</p>"},{"location":"reference/events/warning_message/","title":"Warning Message","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/warning_message.json</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage","title":"WarningMessage  <code>dataclass</code>","text":"<pre><code>WarningMessage(\n    when: When,\n    node_id: str,\n    location: Location,\n    message: str,\n    event: str = \"warning_message\",\n    category: Optional[str] = None,\n)\n</code></pre> <p>A warning message.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.category","title":"category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>category: Optional[str] = None\n</code></pre> <p>The category of the warning message.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: str = 'warning_message'\n</code></pre> <p>The event type. Always 'warning_message'.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.location","title":"location  <code>instance-attribute</code>","text":"<pre><code>location: Location\n</code></pre> <p>The location of the warning message.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The string content of the warning message.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the node where the warning message is emitted.</p>"},{"location":"reference/events/warning_message/#pytest_broadcaster.models.warning_message.WarningMessage.when","title":"when  <code>instance-attribute</code>","text":"<pre><code>when: When\n</code></pre> <p>When the warning message is emitted.</p>"},{"location":"reference/events/collect_report/","title":"Collect Report","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/collect_report.json</p>"},{"location":"reference/events/collect_report/#pytest_broadcaster.models.collect_report.CollectReport","title":"CollectReport  <code>dataclass</code>","text":"<pre><code>CollectReport(\n    node_id: str,\n    items: List[\n        Union[\n            TestDirectory, TestModule, TestSuite, TestCase\n        ]\n    ],\n    event: str = \"collect_report\",\n)\n</code></pre> <p>A report of collected items.</p>"},{"location":"reference/events/collect_report/#pytest_broadcaster.models.collect_report.CollectReport.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: str = 'collect_report'\n</code></pre> <p>The event type. Always set to 'collect_report'.</p>"},{"location":"reference/events/collect_report/#pytest_broadcaster.models.collect_report.CollectReport.items","title":"items  <code>instance-attribute</code>","text":"<pre><code>items: List[\n    Union[TestDirectory, TestModule, TestSuite, TestCase]\n]\n</code></pre> <p>An array of collected items. Each collected item is a test directory, test module, test suite, or test case. Top level directory is always first element in the array, followed by test cases, then test suites, then test modules, then test directories for each level of nesting.</p>"},{"location":"reference/events/collect_report/#pytest_broadcaster.models.collect_report.CollectReport.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node id of the node for which items were collected (the top level root directory has an empty node id).</p>"},{"location":"reference/events/collect_report/test_case/","title":"Test Case","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_case.json</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase","title":"TestCase  <code>dataclass</code>","text":"<pre><code>TestCase(\n    node_id: str,\n    path: str,\n    name: str,\n    doc: str,\n    markers: List[str],\n    parameters: Dict[str, str],\n    node_type: str = \"case\",\n    module: Optional[str] = None,\n    suite: Optional[str] = None,\n    function: Optional[str] = None,\n)\n</code></pre> <p>A collected test case.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.doc","title":"doc  <code>instance-attribute</code>","text":"<pre><code>doc: str\n</code></pre> <p>The test docstring (optional).</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.function","title":"function  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function: Optional[str] = None\n</code></pre> <p>The function name (optional).</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.markers","title":"markers  <code>instance-attribute</code>","text":"<pre><code>markers: List[str]\n</code></pre> <p>The test markers. Each marker is a string.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.module","title":"module  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>module: Optional[str] = None\n</code></pre> <p>The module name where the test case is defined (optional).</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Test Name</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.node_type","title":"node_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node_type: str = 'case'\n</code></pre> <p>The node type. Always set to 'case'.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.parameters","title":"parameters  <code>instance-attribute</code>","text":"<pre><code>parameters: Dict[str, str]\n</code></pre> <p>Test parameters names and types. Each key is a parameter name and each value is a parameter type as a string.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: str\n</code></pre> <p>The file path where the test case is defined.</p>"},{"location":"reference/events/collect_report/test_case/#pytest_broadcaster.models.test_case.TestCase.suite","title":"suite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suite: Optional[str] = None\n</code></pre> <p>The test suite name where the test case is defined (optional).</p>"},{"location":"reference/events/collect_report/test_directory/","title":"Test Directory","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_directory.json</p>"},{"location":"reference/events/collect_report/test_directory/#pytest_broadcaster.models.test_directory.TestDirectory","title":"TestDirectory  <code>dataclass</code>","text":"<pre><code>TestDirectory(\n    node_id: str,\n    name: str,\n    path: str,\n    node_type: str = \"directory\",\n)\n</code></pre> <p>A collected test directory.</p>"},{"location":"reference/events/collect_report/test_directory/#pytest_broadcaster.models.test_directory.TestDirectory.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The directory name.</p>"},{"location":"reference/events/collect_report/test_directory/#pytest_broadcaster.models.test_directory.TestDirectory.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the directory.</p>"},{"location":"reference/events/collect_report/test_directory/#pytest_broadcaster.models.test_directory.TestDirectory.node_type","title":"node_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node_type: str = 'directory'\n</code></pre> <p>The node type. Always set to 'directory'.</p>"},{"location":"reference/events/collect_report/test_directory/#pytest_broadcaster.models.test_directory.TestDirectory.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: str\n</code></pre> <p>The directory path.</p>"},{"location":"reference/events/collect_report/test_module/","title":"Test Module","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_module.json</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule","title":"TestModule  <code>dataclass</code>","text":"<pre><code>TestModule(\n    node_id: str,\n    name: str,\n    path: str,\n    doc: str,\n    markers: List[str],\n    node_type: str = \"module\",\n)\n</code></pre> <p>A collected test module (test file).</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.doc","title":"doc  <code>instance-attribute</code>","text":"<pre><code>doc: str\n</code></pre> <p>The module docstring.</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.markers","title":"markers  <code>instance-attribute</code>","text":"<pre><code>markers: List[str]\n</code></pre> <p>Test markers. Each marker is a string.</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The module name.</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test module.</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.node_type","title":"node_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node_type: str = 'module'\n</code></pre> <p>The node type. Always set to 'module'.</p>"},{"location":"reference/events/collect_report/test_module/#pytest_broadcaster.models.test_module.TestModule.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: str\n</code></pre> <p>The module file path.</p>"},{"location":"reference/events/collect_report/test_suite/","title":"Test Suite","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_suite.json</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite","title":"TestSuite  <code>dataclass</code>","text":"<pre><code>TestSuite(\n    node_id: str,\n    name: str,\n    module: str,\n    path: str,\n    doc: str,\n    markers: List[str],\n    node_type: str = \"suite\",\n)\n</code></pre> <p>A collected test suite (test class).</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.doc","title":"doc  <code>instance-attribute</code>","text":"<pre><code>doc: str\n</code></pre> <p>The suite docstring.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.markers","title":"markers  <code>instance-attribute</code>","text":"<pre><code>markers: List[str]\n</code></pre> <p>Test markers. Each marker is a string.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.module","title":"module  <code>instance-attribute</code>","text":"<pre><code>module: str\n</code></pre> <p>The name of the module where the suite is defined.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The suite name, i.e., the name of the class.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test suite.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.node_type","title":"node_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node_type: str = 'suite'\n</code></pre> <p>The node type. Always set to 'suite'.</p>"},{"location":"reference/events/collect_report/test_suite/#pytest_broadcaster.models.test_suite.TestSuite.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path: str\n</code></pre> <p>The name of the file where the suite is defined.</p>"},{"location":"reference/events/steps/","title":"Test Case Steps","text":"<p>For each test case, the following steps are executed:</p> <ul> <li>Test Case Setup</li> <li>Test Case Teardown</li> <li>Test Case Finished</li> </ul> <p>Optionally, the following steps can be executed before the teardown step (if test is not skipped or setup did not fail):</p> <ul> <li>Test Case Call</li> </ul> <p>The following sections describe the data structure of each step.</p>"},{"location":"reference/events/steps/test_case_call/","title":"Test Case Call","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_case_call.json</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall","title":"TestCaseCall  <code>dataclass</code>","text":"<pre><code>TestCaseCall(\n    node_id: str,\n    outcome: Outcome,\n    duration: float,\n    start: str,\n    stop: str,\n    event_type: str = \"case_call\",\n    error: Optional[TestCaseError] = None,\n)\n</code></pre> <p>Event emitted when a call step has been executed in a test case.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: float\n</code></pre> <p>Duration of the call step in seconds.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: Optional[TestCaseError] = None\n</code></pre> <p>Error details if the call step failed.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.event_type","title":"event_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_type: str = 'case_call'\n</code></pre> <p>The event type. Always set to 'case_call'.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.outcome","title":"outcome  <code>instance-attribute</code>","text":"<pre><code>outcome: Outcome\n</code></pre> <p>Outcome of the call step.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: str\n</code></pre> <p>Start time of the call step in ISO 8601 format.</p>"},{"location":"reference/events/steps/test_case_call/#pytest_broadcaster.models.test_case_call.TestCaseCall.stop","title":"stop  <code>instance-attribute</code>","text":"<pre><code>stop: str\n</code></pre> <p>Stop time of the call step in ISO 8601 format.</p>"},{"location":"reference/events/steps/test_case_finished/","title":"Test Case Finished","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_case_finished.json</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished","title":"TestCaseFinished  <code>dataclass</code>","text":"<pre><code>TestCaseFinished(\n    node_id: str,\n    outcome: Outcome,\n    duration: float,\n    start: str,\n    stop: str,\n    event_type: str = \"case_finished\",\n)\n</code></pre> <p>Event emitted when a test case is finished (meaning all of setup, call and teardown steps are finished).</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: float\n</code></pre> <p>Duration of the test case in seconds (including setup and teardown).</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.event_type","title":"event_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_type: str = 'case_finished'\n</code></pre> <p>The event type. Always set to 'case_finished'.</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.outcome","title":"outcome  <code>instance-attribute</code>","text":"<pre><code>outcome: Outcome\n</code></pre> <p>Outcome of the test case.</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: str\n</code></pre> <p>Start time of the test case (including setup).</p>"},{"location":"reference/events/steps/test_case_finished/#pytest_broadcaster.models.test_case_finished.TestCaseFinished.stop","title":"stop  <code>instance-attribute</code>","text":"<pre><code>stop: str\n</code></pre> <p>Stop time of the test case (including teardown).</p>"},{"location":"reference/events/steps/test_case_setup/","title":"Test Case Setup","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_case_setup.json</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup","title":"TestCaseSetup  <code>dataclass</code>","text":"<pre><code>TestCaseSetup(\n    node_id: str,\n    outcome: Outcome,\n    duration: float,\n    start: str,\n    stop: str,\n    event_type: str = \"case_setup\",\n    error: Optional[TestCaseError] = None,\n)\n</code></pre> <p>Pytest Test Case Setup</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: float\n</code></pre> <p>Duration of the setup step in seconds.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: Optional[TestCaseError] = None\n</code></pre> <p>Error details if the setup step failed.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.event_type","title":"event_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_type: str = 'case_setup'\n</code></pre> <p>The event type. Always set to 'case_setup'.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.outcome","title":"outcome  <code>instance-attribute</code>","text":"<pre><code>outcome: Outcome\n</code></pre> <p>Outcome of the setup step.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: str\n</code></pre> <p>Start time of the setup step in ISO 8601 format.</p>"},{"location":"reference/events/steps/test_case_setup/#pytest_broadcaster.models.test_case_setup.TestCaseSetup.stop","title":"stop  <code>instance-attribute</code>","text":"<pre><code>stop: str\n</code></pre> <p>Stop time of the setup step in ISO 8601 format.</p>"},{"location":"reference/events/steps/test_case_teardown/","title":"Test Case Teardown","text":"<p>JSON Schema</p> <p>https://github.com/charbonnierg/pytest-broadcaster/blob/main/schemas/test_case_teardown.json</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown","title":"TestCaseTeardown  <code>dataclass</code>","text":"<pre><code>TestCaseTeardown(\n    node_id: str,\n    outcome: Outcome,\n    duration: float,\n    start: str,\n    stop: str,\n    event_type: str = \"case_teardown\",\n    error: Optional[TestCaseError] = None,\n)\n</code></pre> <p>Pytest Test Case Teardown</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: float\n</code></pre> <p>Duration of the teardown step in seconds.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: Optional[TestCaseError] = None\n</code></pre> <p>Error details if the teardown step failed.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.event_type","title":"event_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_type: str = 'case_teardown'\n</code></pre> <p>The event type. Always set to 'case_teardown'.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.outcome","title":"outcome  <code>instance-attribute</code>","text":"<pre><code>outcome: Outcome\n</code></pre> <p>Outcome of the teardown step.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: str\n</code></pre> <p>Start time of the teardown step in ISO 8601 format.</p>"},{"location":"reference/events/steps/test_case_teardown/#pytest_broadcaster.models.test_case_teardown.TestCaseTeardown.stop","title":"stop  <code>instance-attribute</code>","text":"<pre><code>stop: str\n</code></pre> <p>Stop time of the teardown step in ISO 8601 format.</p>"},{"location":"reference/hooks/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Add Destination</li> <li>Set Reporter</li> </ul>"},{"location":"reference/hooks/pytest_broadcaster_add_destination/","title":"<code>pytest_broadcaster_add_destination</code>","text":""},{"location":"reference/hooks/pytest_broadcaster_add_destination/#pytest_broadcaster.hooks.pytest_broadcaster_add_destination","title":"pytest_broadcaster_add_destination","text":"<pre><code>pytest_broadcaster_add_destination(\n    add: Callable[[Destination], None]\n) -&gt; None\n</code></pre> <p>Called on plugin initialization.</p> <p>Use it to add your own destination.</p> <p>For instance, in <code>conftest.py</code>:</p> <pre><code>from pytest_broadcaster import HTTPWebhook\n\ndef pytest_broadcaster_add_destination(add):\n    add(HTTPWebhook(url=\"https://example.com\"))\n    add(HTTPWebhook(url=\"https://another-example.com\"))\n</code></pre> <p>Then run pytest without any option:</p> <pre><code>pytest\n</code></pre>"},{"location":"reference/hooks/pytest_broadcaster_set_reporter/","title":"<code>pytest_broadcaster_set_reporter</code>","text":""},{"location":"reference/hooks/pytest_broadcaster_set_reporter/#pytest_broadcaster.hooks.pytest_broadcaster_set_reporter","title":"pytest_broadcaster_set_reporter","text":"<pre><code>pytest_broadcaster_set_reporter(\n    set: Callable[[Reporter], None]\n) -&gt; None\n</code></pre> <p>Called on plugin initialization.</p> <p>Use it to set your own reporter.</p> <p>For instance, in <code>conftest.py</code>:</p> <pre><code>def pytest_broadcaster_set_reporter(set_reporter):\n    set(MyReporter())\n</code></pre> <p>Then run pytest without any option:</p> <pre><code>pytest\n</code></pre>"},{"location":"reference/interfaces/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Destination</li> <li>Reporter</li> </ul>"},{"location":"reference/interfaces/destination/","title":"Destination","text":""},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination","title":"Destination","text":"<p>An interface where you can write events and results.</p>"},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the destination. No-op by default.</p>"},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination.open","title":"open","text":"<pre><code>open() -&gt; None\n</code></pre> <p>Open the destination. No-op by default.</p>"},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination.summary","title":"summary  <code>abstractmethod</code>","text":"<pre><code>summary() -&gt; str | None\n</code></pre> <p>Return a summary of the destination.</p>"},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination.write_event","title":"write_event  <code>abstractmethod</code>","text":"<pre><code>write_event(event: SessionEvent) -&gt; None\n</code></pre> <p>Write an event to the destination.</p>"},{"location":"reference/interfaces/destination/#pytest_broadcaster.interfaces.Destination.write_result","title":"write_result  <code>abstractmethod</code>","text":"<pre><code>write_result(result: SessionResult) -&gt; None\n</code></pre> <p>Write the session result to the destination.</p>"},{"location":"reference/interfaces/reporter/","title":"Reporter","text":""},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter","title":"Reporter","text":"<p>An interface to create events and results.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_collect_report","title":"make_collect_report  <code>abstractmethod</code>","text":"<pre><code>make_collect_report(report: CollectReport) -&gt; CollectReport\n</code></pre> <p>Return a collect report event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_error_message","title":"make_error_message  <code>abstractmethod</code>","text":"<pre><code>make_error_message(\n    report: CollectReport, call: CallInfo[Any]\n) -&gt; ErrorMessage\n</code></pre> <p>Return an error message event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_session_finish","title":"make_session_finish  <code>abstractmethod</code>","text":"<pre><code>make_session_finish(exit_status: int) -&gt; SessionFinish\n</code></pre> <p>Return a session finish event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_session_result","title":"make_session_result  <code>abstractmethod</code>","text":"<pre><code>make_session_result() -&gt; SessionResult | None\n</code></pre> <p>Return the session result, if session is done, else returns None.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_session_start","title":"make_session_start  <code>abstractmethod</code>","text":"<pre><code>make_session_start() -&gt; SessionStart\n</code></pre> <p>Return a session start event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_test_case_finished","title":"make_test_case_finished  <code>abstractmethod</code>","text":"<pre><code>make_test_case_finished(node_id: str) -&gt; TestCaseFinished\n</code></pre> <p>Return a test case finished event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_test_case_step","title":"make_test_case_step  <code>abstractmethod</code>","text":"<pre><code>make_test_case_step(\n    report: TestReport,\n) -&gt; TestCaseCall | TestCaseSetup | TestCaseTeardown\n</code></pre> <p>Return a test case step event.</p>"},{"location":"reference/interfaces/reporter/#pytest_broadcaster.interfaces.Reporter.make_warning_message","title":"make_warning_message  <code>abstractmethod</code>","text":"<pre><code>make_warning_message(\n    warning_message: WarningMessage,\n    when: Literal[\"config\", \"collect\", \"runtest\"],\n    nodeid: str,\n) -&gt; WarningMessage\n</code></pre> <p>Return a warning message event.</p>"},{"location":"reference/result/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Session Result<ul> <li>Test Case Report</li> </ul> </li> </ul>"},{"location":"reference/result/session_result/","title":"Session Result","text":""},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult","title":"SessionResult  <code>dataclass</code>","text":"<pre><code>SessionResult(\n    pytest_version: str,\n    plugin_version: str,\n    exit_status: int,\n    errors: List[ErrorMessage],\n    warnings: List[WarningMessage],\n    collect_reports: List[CollectReport],\n    test_reports: List[TestCaseReport],\n)\n</code></pre> <p>Result of a pytest session, including collect reports and test reports.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.collect_reports","title":"collect_reports  <code>instance-attribute</code>","text":"<pre><code>collect_reports: List[CollectReport]\n</code></pre> <p>Collect reports generated during the session.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.errors","title":"errors  <code>instance-attribute</code>","text":"<pre><code>errors: List[ErrorMessage]\n</code></pre> <p>Errors generated during the session.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.exit_status","title":"exit_status  <code>instance-attribute</code>","text":"<pre><code>exit_status: int\n</code></pre> <p>The exit status of the pytest run. 0 indicates success, non-zero indicates failure.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.plugin_version","title":"plugin_version  <code>instance-attribute</code>","text":"<pre><code>plugin_version: str\n</code></pre> <p>The version of the plugin that generated the report.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.pytest_version","title":"pytest_version  <code>instance-attribute</code>","text":"<pre><code>pytest_version: str\n</code></pre> <p>The version of pytest that generated the report.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.test_reports","title":"test_reports  <code>instance-attribute</code>","text":"<pre><code>test_reports: List[TestCaseReport]\n</code></pre> <p>Test reports generated during the session.</p>"},{"location":"reference/result/session_result/#pytest_broadcaster.models.session_result.SessionResult.warnings","title":"warnings  <code>instance-attribute</code>","text":"<pre><code>warnings: List[WarningMessage]\n</code></pre> <p>Warnings generated during the session.</p>"},{"location":"reference/result/session_result/test_case_report/","title":"Test Case Report","text":""},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport","title":"TestCaseReport  <code>dataclass</code>","text":"<pre><code>TestCaseReport(\n    node_id: str,\n    outcome: Outcome,\n    duration: float,\n    setup: TestCaseSetup,\n    teardown: TestCaseTeardown,\n    finished: TestCaseFinished,\n    call: Optional[TestCaseCall] = None,\n)\n</code></pre> <p>Report for a single test case.</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.call","title":"call  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call: Optional[TestCaseCall] = None\n</code></pre> <p>Call step of the test case (optional).</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.duration","title":"duration  <code>instance-attribute</code>","text":"<pre><code>duration: float\n</code></pre> <p>Duration of the test case in seconds (including setup and teardown).</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.finished","title":"finished  <code>instance-attribute</code>","text":"<pre><code>finished: TestCaseFinished\n</code></pre> <p>View of the test case after it has finished.</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.node_id","title":"node_id  <code>instance-attribute</code>","text":"<pre><code>node_id: str\n</code></pre> <p>The node ID of the test case.</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.outcome","title":"outcome  <code>instance-attribute</code>","text":"<pre><code>outcome: Outcome\n</code></pre> <p>Outcome of the test case.</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.setup","title":"setup  <code>instance-attribute</code>","text":"<pre><code>setup: TestCaseSetup\n</code></pre> <p>Setup step of the test case.</p>"},{"location":"reference/result/session_result/test_case_report/#pytest_broadcaster.models.test_case_report.TestCaseReport.teardown","title":"teardown  <code>instance-attribute</code>","text":"<pre><code>teardown: TestCaseTeardown\n</code></pre> <p>Teardown step of the test case.</p>"},{"location":"usage/SUMMARY/","title":"SUMMARY","text":"<ul> <li>JSON File</li> <li>JSON Lines File</li> <li>HTTP Webhook</li> <li>HTTP Webhook (Stream)</li> </ul>"},{"location":"usage/http_webhook/","title":"Sending JSON to a Webhook","text":"<p>To publish a JSON report over HTTP, you can use the <code>--collect-url</code> option with a URL. This will send a POST request with the session result.</p> Option Description <code>--collect-url</code> Send a JSON report file with the session result to a <code>HTTP</code> webhook using a <code>POST</code> request. pytest --collect-url=http://localhost:8000 <p>The <code>POST</code> request is sent on session exit, after all tests have been collected and run.</p>"},{"location":"usage/http_webhook_stream/","title":"Streaming JSON to a Webhook","text":"<p>To publish a JSON Lines log stream over HTTP, you can use the <code>--collect-log-url</code> option with a URL. This will send a POST request for each session event.</p> Option Description <code>--collect-log-url</code> Send session events to <code>HTTP</code> webhook using a <code>POST</code> requests. pytest --collect-log-url=http://localhost:8000 <p>A <code>POST</code> request is sent for each event as it occurs during the session.</p>"},{"location":"usage/json_file/","title":"Generating a JSON report","text":"<p>To generate a JSON report, you can use the <code>--collect-report</code> option with a filename. This will output a JSON file with the session result.</p> Option Description <code>--collect-report</code> Output a JSON report file with the session result. pytest --collect-report=report.json <p>The report will be written on session exit, after all tests have been collected and run.</p>"},{"location":"usage/json_lines/","title":"Generating a JSON Lines log stream","text":"<p>To generate a JSON Lines log stream, you can use the <code>--collect-log</code> option with a filename. This will output a JSON Lines stream with the session events.</p> Option Description <code>--collect-log</code> Output session events to JSON Lines file. pytest --collect-log=events.log <p>The log stream is written as events occur during the session.</p>"}]}